// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: src/proto/vote.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreServiceClient is the client API for ScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreServiceClient interface {
	CreateVote(ctx context.Context, in *CreateVoteReq, opts ...grpc.CallOption) (*CreateVoteRes, error)
	UpdateVote(ctx context.Context, in *UpdateVoteReq, opts ...grpc.CallOption) (*UpdateVoteRes, error)
	DeleteVote(ctx context.Context, in *DeleteVoteReq, opts ...grpc.CallOption) (*DeleteVoteRes, error)
	ReadVote(ctx context.Context, in *ReadVoteReq, opts ...grpc.CallOption) (*ReadVoteRes, error)
	ListVotes(ctx context.Context, in *ListVotesReq, opts ...grpc.CallOption) (ScoreService_ListVotesClient, error)
}

type scoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreServiceClient(cc grpc.ClientConnInterface) ScoreServiceClient {
	return &scoreServiceClient{cc}
}

func (c *scoreServiceClient) CreateVote(ctx context.Context, in *CreateVoteReq, opts ...grpc.CallOption) (*CreateVoteRes, error) {
	out := new(CreateVoteRes)
	err := c.cc.Invoke(ctx, "/ScoreService/CreateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) UpdateVote(ctx context.Context, in *UpdateVoteReq, opts ...grpc.CallOption) (*UpdateVoteRes, error) {
	out := new(UpdateVoteRes)
	err := c.cc.Invoke(ctx, "/ScoreService/UpdateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) DeleteVote(ctx context.Context, in *DeleteVoteReq, opts ...grpc.CallOption) (*DeleteVoteRes, error) {
	out := new(DeleteVoteRes)
	err := c.cc.Invoke(ctx, "/ScoreService/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) ReadVote(ctx context.Context, in *ReadVoteReq, opts ...grpc.CallOption) (*ReadVoteRes, error) {
	out := new(ReadVoteRes)
	err := c.cc.Invoke(ctx, "/ScoreService/ReadVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreServiceClient) ListVotes(ctx context.Context, in *ListVotesReq, opts ...grpc.CallOption) (ScoreService_ListVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScoreService_ServiceDesc.Streams[0], "/ScoreService/ListVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoreServiceListVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScoreService_ListVotesClient interface {
	Recv() (*ListVotesRes, error)
	grpc.ClientStream
}

type scoreServiceListVotesClient struct {
	grpc.ClientStream
}

func (x *scoreServiceListVotesClient) Recv() (*ListVotesRes, error) {
	m := new(ListVotesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoreServiceServer is the server API for ScoreService service.
// All implementations must embed UnimplementedScoreServiceServer
// for forward compatibility
type ScoreServiceServer interface {
	CreateVote(context.Context, *CreateVoteReq) (*CreateVoteRes, error)
	UpdateVote(context.Context, *UpdateVoteReq) (*UpdateVoteRes, error)
	DeleteVote(context.Context, *DeleteVoteReq) (*DeleteVoteRes, error)
	ReadVote(context.Context, *ReadVoteReq) (*ReadVoteRes, error)
	ListVotes(*ListVotesReq, ScoreService_ListVotesServer) error
	mustEmbedUnimplementedScoreServiceServer()
}

// UnimplementedScoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScoreServiceServer struct {
}

func (UnimplementedScoreServiceServer) CreateVote(context.Context, *CreateVoteReq) (*CreateVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVote not implemented")
}
func (UnimplementedScoreServiceServer) UpdateVote(context.Context, *UpdateVoteReq) (*UpdateVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVote not implemented")
}
func (UnimplementedScoreServiceServer) DeleteVote(context.Context, *DeleteVoteReq) (*DeleteVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (UnimplementedScoreServiceServer) ReadVote(context.Context, *ReadVoteReq) (*ReadVoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVote not implemented")
}
func (UnimplementedScoreServiceServer) ListVotes(*ListVotesReq, ScoreService_ListVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVotes not implemented")
}
func (UnimplementedScoreServiceServer) mustEmbedUnimplementedScoreServiceServer() {}

// UnsafeScoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServiceServer will
// result in compilation errors.
type UnsafeScoreServiceServer interface {
	mustEmbedUnimplementedScoreServiceServer()
}

func RegisterScoreServiceServer(s grpc.ServiceRegistrar, srv ScoreServiceServer) {
	s.RegisterService(&ScoreService_ServiceDesc, srv)
}

func _ScoreService_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScoreService/CreateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).CreateVote(ctx, req.(*CreateVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_UpdateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).UpdateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScoreService/UpdateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).UpdateVote(ctx, req.(*UpdateVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScoreService/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).DeleteVote(ctx, req.(*DeleteVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_ReadVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServiceServer).ReadVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScoreService/ReadVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServiceServer).ReadVote(ctx, req.(*ReadVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreService_ListVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVotesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScoreServiceServer).ListVotes(m, &scoreServiceListVotesServer{stream})
}

type ScoreService_ListVotesServer interface {
	Send(*ListVotesRes) error
	grpc.ServerStream
}

type scoreServiceListVotesServer struct {
	grpc.ServerStream
}

func (x *scoreServiceListVotesServer) Send(m *ListVotesRes) error {
	return x.ServerStream.SendMsg(m)
}

// ScoreService_ServiceDesc is the grpc.ServiceDesc for ScoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ScoreService",
	HandlerType: (*ScoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVote",
			Handler:    _ScoreService_CreateVote_Handler,
		},
		{
			MethodName: "UpdateVote",
			Handler:    _ScoreService_UpdateVote_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _ScoreService_DeleteVote_Handler,
		},
		{
			MethodName: "ReadVote",
			Handler:    _ScoreService_ReadVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVotes",
			Handler:       _ScoreService_ListVotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/proto/vote.proto",
}

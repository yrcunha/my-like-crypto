// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: src/proto/vote.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotesServiceClient is the client API for VotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotesServiceClient interface {
	Upvote(ctx context.Context, in *UpvoteReq, opts ...grpc.CallOption) (*UpvoteRes, error)
	Downvote(ctx context.Context, in *DownvoteReq, opts ...grpc.CallOption) (*DownvoteRes, error)
	CreateCrypto(ctx context.Context, in *CreateCryptoReq, opts ...grpc.CallOption) (*CreateCryptoRes, error)
	DeleteCrypto(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DeleteCryptoRes, error)
	RecordVotes(ctx context.Context, in *RecordVotesReq, opts ...grpc.CallOption) (VotesService_RecordVotesClient, error)
}

type votesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotesServiceClient(cc grpc.ClientConnInterface) VotesServiceClient {
	return &votesServiceClient{cc}
}

func (c *votesServiceClient) Upvote(ctx context.Context, in *UpvoteReq, opts ...grpc.CallOption) (*UpvoteRes, error) {
	out := new(UpvoteRes)
	err := c.cc.Invoke(ctx, "/VotesService/Upvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) Downvote(ctx context.Context, in *DownvoteReq, opts ...grpc.CallOption) (*DownvoteRes, error) {
	out := new(DownvoteRes)
	err := c.cc.Invoke(ctx, "/VotesService/Downvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) CreateCrypto(ctx context.Context, in *CreateCryptoReq, opts ...grpc.CallOption) (*CreateCryptoRes, error) {
	out := new(CreateCryptoRes)
	err := c.cc.Invoke(ctx, "/VotesService/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) DeleteCrypto(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DeleteCryptoRes, error) {
	out := new(DeleteCryptoRes)
	err := c.cc.Invoke(ctx, "/VotesService/DeleteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votesServiceClient) RecordVotes(ctx context.Context, in *RecordVotesReq, opts ...grpc.CallOption) (VotesService_RecordVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &VotesService_ServiceDesc.Streams[0], "/VotesService/RecordVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &votesServiceRecordVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VotesService_RecordVotesClient interface {
	Recv() (*RecordVotesRes, error)
	grpc.ClientStream
}

type votesServiceRecordVotesClient struct {
	grpc.ClientStream
}

func (x *votesServiceRecordVotesClient) Recv() (*RecordVotesRes, error) {
	m := new(RecordVotesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VotesServiceServer is the server API for VotesService service.
// All implementations must embed UnimplementedVotesServiceServer
// for forward compatibility
type VotesServiceServer interface {
	Upvote(context.Context, *UpvoteReq) (*UpvoteRes, error)
	Downvote(context.Context, *DownvoteReq) (*DownvoteRes, error)
	CreateCrypto(context.Context, *CreateCryptoReq) (*CreateCryptoRes, error)
	DeleteCrypto(context.Context, *DeleteCryptoReq) (*DeleteCryptoRes, error)
	RecordVotes(*RecordVotesReq, VotesService_RecordVotesServer) error
	mustEmbedUnimplementedVotesServiceServer()
}

// UnimplementedVotesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVotesServiceServer struct {
}

func (UnimplementedVotesServiceServer) Upvote(context.Context, *UpvoteReq) (*UpvoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upvote not implemented")
}
func (UnimplementedVotesServiceServer) Downvote(context.Context, *DownvoteReq) (*DownvoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Downvote not implemented")
}
func (UnimplementedVotesServiceServer) CreateCrypto(context.Context, *CreateCryptoReq) (*CreateCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (UnimplementedVotesServiceServer) DeleteCrypto(context.Context, *DeleteCryptoReq) (*DeleteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrypto not implemented")
}
func (UnimplementedVotesServiceServer) RecordVotes(*RecordVotesReq, VotesService_RecordVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordVotes not implemented")
}
func (UnimplementedVotesServiceServer) mustEmbedUnimplementedVotesServiceServer() {}

// UnsafeVotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotesServiceServer will
// result in compilation errors.
type UnsafeVotesServiceServer interface {
	mustEmbedUnimplementedVotesServiceServer()
}

func RegisterVotesServiceServer(s grpc.ServiceRegistrar, srv VotesServiceServer) {
	s.RegisterService(&VotesService_ServiceDesc, srv)
}

func _VotesService_Upvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).Upvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotesService/Upvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).Upvote(ctx, req.(*UpvoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_Downvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownvoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).Downvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotesService/Downvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).Downvote(ctx, req.(*DownvoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotesService/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).CreateCrypto(ctx, req.(*CreateCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_DeleteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotesServiceServer).DeleteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotesService/DeleteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotesServiceServer).DeleteCrypto(ctx, req.(*DeleteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotesService_RecordVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecordVotesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VotesServiceServer).RecordVotes(m, &votesServiceRecordVotesServer{stream})
}

type VotesService_RecordVotesServer interface {
	Send(*RecordVotesRes) error
	grpc.ServerStream
}

type votesServiceRecordVotesServer struct {
	grpc.ServerStream
}

func (x *votesServiceRecordVotesServer) Send(m *RecordVotesRes) error {
	return x.ServerStream.SendMsg(m)
}

// VotesService_ServiceDesc is the grpc.ServiceDesc for VotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VotesService",
	HandlerType: (*VotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upvote",
			Handler:    _VotesService_Upvote_Handler,
		},
		{
			MethodName: "Downvote",
			Handler:    _VotesService_Downvote_Handler,
		},
		{
			MethodName: "CreateCrypto",
			Handler:    _VotesService_CreateCrypto_Handler,
		},
		{
			MethodName: "DeleteCrypto",
			Handler:    _VotesService_DeleteCrypto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordVotes",
			Handler:       _VotesService_RecordVotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/proto/vote.proto",
}
